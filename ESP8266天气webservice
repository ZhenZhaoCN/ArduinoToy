#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Arduino_JSON.h>

/*WIFI名，WIFI密码，web service地址 */
const char* ssid = "95HAO@unifi";
const char* password = "9876543210";
const char* serverName = "http://api.openweathermap.org/data/2.5/weather?q=kuala%20lumpur&appid=efc8bd20667f1133caf793d4469664f2&units=metric";

WiFiServer espServer(80); /* WiFiServer的实例，端口号80, 80是HTTP Web Server默认端口号*/
String responseOfTheRequest;/* 存放response的临时变量*/

void setup()
{
  Serial.begin(115200); /* 8266默认波特率 */
  Serial.print("\n");
  Serial.print("Connecting to: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA); /* Configure ESP8266 in STA Mode */
  WiFi.begin(ssid, password); /* Connect to Wi-Fi based on above SSID and Password */
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\n");
  Serial.print("Connected to Wi-Fi: ");
  Serial.println(WiFi.SSID());
  delay(1000);
  /* The next four lines of Code are used for assigning Static IP to ESP8266 */
  /* Do this only if you know what you are doing */
  /* You have to check for free IP Addresses from your Router and */
  /* assign it to ESP8266 */
  /* If you are confirtable with this step, please un-comment the next four lines *
    /* if not, leave it as it is and proceed */
  //IPAddress ip(192,168,1,6);
  //IPAddress gateway(192,168,1,1);
  //IPAddress subnet(255,255,255,0);
  //WiFi.config(ip, gateway, subnet);
  //delay(2000);
  Serial.print("\n");
  Serial.println("Starting ESP8266 Web Server...");
  espServer.begin(); /* Start the HTTP web Server */
  Serial.println("ESP8266 Web Server Started");
  Serial.print("\n");
  Serial.print("The URL of ESP8266 Web Server is: ");
  Serial.print("http://");
  Serial.println(WiFi.localIP());
  Serial.print("\n");
  Serial.println("Use the above URL in your Browser to access ESP8266 Web Server\n");
}

void loop()
{
  WiFiClient client = espServer.accept(); /* Check if a client is available */
  if (client) {
    Serial.println("Client connected.");
    while (client.connected()) {
      if (client.available()) {
        String request = client.readStringUntil('\r'); /* Read the first line of the request from client */
        Serial.println(request); /* Print the request on the Serial monitor */
        /* The request is in the form of HTTP GET Method */
        client.flush();

        /* request URL举例*/
        /* 如果IP地址是http://192.168.1.108/ (for example),
           then URLs are:
           192.168.1.108/GPIO4ON and its request is GET /GPIO4ON HTTP/1.1
           192.168.1.108/GPIO4OFF and its request is GET /GPIO4OFF HTTP/1.1
           192.168.1.108/GPIO5ON and its request is GET /GPIO5ON HTTP/1.1
           192.168.1.108/GPIO4OFF and its request is GET /GPIO5OFF HTTP/1.1

            代码示例：
             if (request.indexOf("/GPIO4ON") != -1)
              {
                Serial.println("GPIO4 LED is ON");
                digitalWrite(gpio4LEDPin, HIGH);
                gpio4Value = HIGH;
              }
        */

        responseOfTheRequest = httpGETRequest(serverName);
        Serial.println(responseOfTheRequest);
        JSONVar myObject = JSON.parse(responseOfTheRequest);
        // JSON.typeof(jsonVar) can be used to get the type of the var
        if (JSON.typeof(myObject) == "undefined") {
          Serial.println("Parsing input failed!");
          return;
        }
        /* DEBUGresponse的data使用
          //  myObject.keys() can be used to get an array of all the keys in the object
          //  JSONVar keys = myObject.keys();
          //  Serial.println(keys);
          //  for (int i = 0; i < keys.length(); i++) {
          //    JSONVar value = myObject[keys[i]];
          //    Serial.print(keys[i]);
          //    Serial.print(" = ");
          //    Serial.println(value);
          //    responseOfTheRequestArr[i] = double(value);
          //  }*/

        /*HTTP Response in the form of HTML Web Page */
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println("Connection: close");
        client.println("Refresh: 600\r\n");//refresh the page automatically every 5 sec
        //client.println(); //IMPORTANT
        client.println("<!DOCTYPE HTML>");
        client.println("<html>");
        client.println("<head>");
        client.println("<meta charSet=\"utf-8\" name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
        client.println("<link rel=\"icon\" href=\"data:,\">");

        /* CSS Styling for Buttons and Web Page */
        client.println("<style>");
        client.println("html { font-family: Courier New; display: inline-block; margin: 0px auto; text-align: center;}");
        client.println(".button {border: none; color: white; padding: 10px 20px; text-align: center;");
        client.println("text-decoration: none; font-size: 25px; margin: 2px; cursor: pointer;}");
        client.println(".button1 {background-color: #13B3F0;}");
        client.println(".button2 {background-color: #3342FF;}");
        client.println("</style>");
        client.println("</head>");

        /* The main body of the Web Page */
        client.println("<body>");
        client.println("<h2>当前天气</h2>");
        client.println("<p>今日温度");
        client.print(myObject[String("main")][String("temp_min")]);
        client.print(" - ");
        client.print(myObject[String("main")][String("temp_max")]);
        client.println("&#8451;</p>");
        client.println("<p>平均气温");
        client.println(myObject[String("main")][String("temp")]);
        client.println("&#8451;</p>");
        client.println("<p>湿度");
        client.println(myObject[String("main")][String("humidity")]);
        client.println("&#37;</p>");
        client.println("<p>气压");
        client.println(myObject[String("main")][String("pressure")]);
        client.println("Pa</p>");
        client.println("<p>风速");
        client.println(myObject[String("wind")][String("speed")]);
        client.println("</p>");
        /* The main body of the Web Page */

        client.println("</body>");
        client.println("</html>");
        client.print("\n");
        break;
      } else
      {
        Serial.println("No Client.");
        delay(1000);
        return;
      }
    }
    delay(1000);
    /* Close the connection */
    while (client.available()) {
      client.read();
    }
    client.stop();
    Serial.println("Client disconnected");
  }
}

/*调用GetHttpRequest的通用方法*/
String httpGETRequest(const char* serverName) {
  WiFiClient client;
  HTTPClient http;

  http.begin(client, serverName);  // Your IP address with path or Domain name with URL path
  /* //If you need Node-RED/server authentication, insert user and password below
    http.setAuthorization("REPLACE_WITH_SERVER_USERNAME", "REPLACE_WITH_SERVER_PASSWORD");*/

  int httpResponseCode = http.GET();// Send HTTP POST request
  String data = "{}";
  if (httpResponseCode > 0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    data = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  // Free resources
  http.end();
  return data;
}
